SYMBOLS {
    __HIMEM__:        type = weak,   value = $C000; # from this point forward we have I/O area and Kernal
    __OVERLAYSIZE__: type = weak, value = $2000; # 8192 bytes
    __OVERLAYSTART__: type = export, value = __HIMEM__ - __OVERLAYSIZE__; # $A000 - $BFFF
    __STACKSIZE__:    type = weak,   value = $0700; # 1.75k stack
    __STACKSTART__:   type = weak,   value = (__OVERLAYSTART__ - 1) - __STACKSIZE__; 
    __MAINSTART__:  type = export,   value = $0400; # 100-1ff is 6502 stack; 200-2ff is used by SuperBASIC, $300-3ff is used by DOS for buffers
    __MAINSIZE__:  type = weak,   value = __STACKSTART__ - __MAINSTART__;
}
MEMORY {
    ZP:       file = "", define = yes, start = $0040,                   size = $00F0 - $0040;
    MAIN:     file = %O, define = yes, start = __MAINSTART__,           size = __MAINSIZE__;
    OVL1:     file = "%O.1",           start = __OVERLAYSTART__ + 0, 	size = __OVERLAYSIZE__;
    OVL2:     file = "%O.2",           start = __OVERLAYSTART__ + 0, 	size = __OVERLAYSIZE__;
    OVL3:     file = "%O.3",           start = __OVERLAYSTART__ + 0, 	size = __OVERLAYSIZE__;
    OVL4:     file = "%O.4",           start = __OVERLAYSTART__ + 0, 	size = __OVERLAYSIZE__;
    OVL5:     file = "%O.5",           start = __OVERLAYSTART__ + 0, 	size = __OVERLAYSIZE__;
    OVL6:     file = "%O.6",           start = __OVERLAYSTART__ + 0, 	size = __OVERLAYSIZE__;
    OVL7:     file = "%O.7",           start = __OVERLAYSTART__ + 0, 	size = __OVERLAYSIZE__;
    OVL8:     file = "%O.8",           start = __OVERLAYSTART__ + 0, 	size = __OVERLAYSIZE__;
    OVL9:     file = "%O.9",           start = __OVERLAYSTART__ + 0, 	size = __OVERLAYSIZE__;
}
SEGMENTS {
    ZEROPAGE:				load = ZP,       type = zp;
    STARTUP:				load = MAIN,     type = ro;
    LOWCODE:				load = MAIN,     type = ro,                optional = yes;
    ONCE:					load = MAIN,     type = ro,                optional = yes;
    CODE:					load = MAIN,     type = ro;
    RODATA:					load = MAIN,     type = ro;
    DATA:					load = MAIN,     type = rw;
    INIT:					load = MAIN,     type = bss;
    BSS:     				load = MAIN,     type = bss, define = yes;
    OVERLAY_1: 				load = OVL1,     type = ro,  define = yes, optional = yes;
    OVERLAY_2: 				load = OVL2,     type = ro,  define = yes, optional = yes;
    OVERLAY_3: 				load = OVL3,     type = ro,  define = yes, optional = yes;
    OVERLAY_4: 				load = OVL4,     type = ro,  define = yes, optional = yes;
    OVERLAY_5: 				load = OVL5,     type = ro,  define = yes, optional = yes;
    OVERLAY_6:				load = OVL6,     type = ro,  define = yes, optional = yes;
    OVERLAY_7: 				load = OVL7,     type = ro,  define = yes, optional = yes;
    OVERLAY_8:				load = OVL8,     type = ro,  define = yes, optional = yes;
    OVERLAY_9: 				load = OVL9,     type = ro,  define = yes, optional = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}

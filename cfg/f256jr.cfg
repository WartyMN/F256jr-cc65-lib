SYMBOLS {
    __HIMEM__:        type = weak,   value = $C000; # from this point forward we have I/O area and Kernal
    __STACKSIZE__:    type = weak,   value = $0700; # 1.75k stack
    __STACKSTART__:   type = weak,   value = __HIMEM__ - __STACKSIZE__ - 2;
    __MAINSTART__:  type = export,   value = $0400; # 100-1ff is 6502 stack; 200-2ff is used by SuperBASIC, $300-3ff is used by DOS for buffers
    __MAINSIZE__:  type = weak,   value = __STACKSTART__ - __MAINSTART__;
}
MEMORY {
    ZP:       file = "", define = yes, start = $0040,                   size = $00F0 - $0040;
    KERNEL:   file = "", define = yes, start = $00f0,                   size = $10;
    MAIN:     file = %O, define = yes, start = __MAINSTART__,           size = __MAINSIZE__;
}
SEGMENTS {
    ZEROPAGE:				load = ZP,       type = zp;
    KERNEL_ARGS:			load = KERNEL,       type = zp;
    STARTUP:				load = MAIN,     type = ro;
    LOWCODE:				load = MAIN,     type = ro,                optional = yes;
    ONCE:					load = MAIN,     type = ro,                optional = yes;
    CODE:					load = MAIN,     type = ro;
    RODATA:					load = MAIN,     type = ro;
    DATA:					load = MAIN,     type = rw;
    INIT:					load = MAIN,     type = bss;
    BSS:     				load = MAIN,     type = bss, define = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
